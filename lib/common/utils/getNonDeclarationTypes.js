'use strict';

var _jscodeshift;

function _load_jscodeshift() {
  return _jscodeshift = _interopRequireDefault(require('jscodeshift'));
}

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * This will get a list of all types that are not from a declaration.
 *
 * NOTE: this can get types that are declared, if you want access to
 * types that are used but undeclared see getUndeclaredTypes
 */
/*
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the license found in the LICENSE file in
 * the root directory of this source tree.
 *
 * 
 */

function getNonDeclarationTypes(root) {
  var ids = new Set();

  // Pull out the logic to handle a generic type annotation, we have to iterate
  // down the qualified types to handle things like: `<Immutable.List<Foo>>`
  function handleGenericType(node) {
    if ((_jscodeshift || _load_jscodeshift()).default.Identifier.check(node.id)) {
      ids.add(node.id.name);
    }
    if ((_jscodeshift || _load_jscodeshift()).default.QualifiedTypeIdentifier.check(node.id)) {
      var currPos = node.id;
      while (currPos && !(_jscodeshift || _load_jscodeshift()).default.Identifier.check(currPos)) {
        currPos = currPos.qualification;
      }
      if ((_jscodeshift || _load_jscodeshift()).default.Identifier.check(currPos)) {
        ids.add(currPos.name);
      }
    }
  }

  // Ideally this would be the only find in here, but it's not because of a
  // jscodeshift bug, so we have to manually search for a specific kind of
  // GenericTypeAnnotations on class super types
  root.find((_jscodeshift || _load_jscodeshift()).default.GenericTypeAnnotation).forEach(function (path) {
    return handleGenericType(path.node);
  });

  // TODO: Delete this after https://github.com/facebook/jscodeshift/issues/34
  root.find((_jscodeshift || _load_jscodeshift()).default.ClassDeclaration).filter(function (path) {
    return path.node.superTypeParameters && Array.isArray(path.node.superTypeParameters.params);
  }).forEach(function (path) {
    (0, (_jscodeshift || _load_jscodeshift()).default)(path.node.superTypeParameters).find((_jscodeshift || _load_jscodeshift()).default.GenericTypeAnnotation).forEach(function (subPath) {
      return handleGenericType(subPath.node);
    });
  });

  return ids;
}

module.exports = getNonDeclarationTypes;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21tb24vdXRpbHMvZ2V0Tm9uRGVjbGFyYXRpb25UeXBlcy5qcyJdLCJuYW1lcyI6WyJnZXROb25EZWNsYXJhdGlvblR5cGVzIiwicm9vdCIsImlkcyIsIlNldCIsImhhbmRsZUdlbmVyaWNUeXBlIiwibm9kZSIsIklkZW50aWZpZXIiLCJjaGVjayIsImlkIiwiYWRkIiwibmFtZSIsIlF1YWxpZmllZFR5cGVJZGVudGlmaWVyIiwiY3VyclBvcyIsInF1YWxpZmljYXRpb24iLCJmaW5kIiwiR2VuZXJpY1R5cGVBbm5vdGF0aW9uIiwiZm9yRWFjaCIsInBhdGgiLCJDbGFzc0RlY2xhcmF0aW9uIiwiZmlsdGVyIiwic3VwZXJUeXBlUGFyYW1ldGVycyIsIkFycmF5IiwiaXNBcnJheSIsInBhcmFtcyIsInN1YlBhdGgiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiOzs7O0FBWUE7QUFBQTtBQUFBOzs7O0FBRUE7Ozs7OztBQWRBOzs7Ozs7Ozs7O0FBb0JBLFNBQVNBLHNCQUFULENBQWdDQyxJQUFoQyxFQUErRDtBQUM3RCxNQUFNQyxNQUFNLElBQUlDLEdBQUosRUFBWjs7QUFFQTtBQUNBO0FBQ0EsV0FBU0MsaUJBQVQsQ0FBMkJDLElBQTNCLEVBQTZDO0FBQzNDLFFBQUksOENBQUtDLFVBQUwsQ0FBZ0JDLEtBQWhCLENBQXNCRixLQUFLRyxFQUEzQixDQUFKLEVBQW9DO0FBQ2xDTixVQUFJTyxHQUFKLENBQVFKLEtBQUtHLEVBQUwsQ0FBUUUsSUFBaEI7QUFDRDtBQUNELFFBQUksOENBQUtDLHVCQUFMLENBQTZCSixLQUE3QixDQUFtQ0YsS0FBS0csRUFBeEMsQ0FBSixFQUFpRDtBQUMvQyxVQUFJSSxVQUFVUCxLQUFLRyxFQUFuQjtBQUNBLGFBQU9JLFdBQVcsQ0FBQyw4Q0FBS04sVUFBTCxDQUFnQkMsS0FBaEIsQ0FBc0JLLE9BQXRCLENBQW5CLEVBQW1EO0FBQ2pEQSxrQkFBVUEsUUFBUUMsYUFBbEI7QUFDRDtBQUNELFVBQUksOENBQUtQLFVBQUwsQ0FBZ0JDLEtBQWhCLENBQXNCSyxPQUF0QixDQUFKLEVBQW9DO0FBQ2xDVixZQUFJTyxHQUFKLENBQVFHLFFBQVFGLElBQWhCO0FBQ0Q7QUFDRjtBQUNGOztBQUVEO0FBQ0E7QUFDQTtBQUNBVCxPQUNHYSxJQURILENBQ1EsOENBQUtDLHFCQURiLEVBRUdDLE9BRkgsQ0FFVztBQUFBLFdBQVFaLGtCQUFrQmEsS0FBS1osSUFBdkIsQ0FBUjtBQUFBLEdBRlg7O0FBSUE7QUFDQUosT0FDR2EsSUFESCxDQUNRLDhDQUFLSSxnQkFEYixFQUVHQyxNQUZILENBRVU7QUFBQSxXQUNORixLQUFLWixJQUFMLENBQVVlLG1CQUFWLElBQ0FDLE1BQU1DLE9BQU4sQ0FBY0wsS0FBS1osSUFBTCxDQUFVZSxtQkFBVixDQUE4QkcsTUFBNUMsQ0FGTTtBQUFBLEdBRlYsRUFNR1AsT0FOSCxDQU1XLGdCQUFRO0FBQ2YsdURBQUtDLEtBQUtaLElBQUwsQ0FBVWUsbUJBQWYsRUFDR04sSUFESCxDQUNRLDhDQUFLQyxxQkFEYixFQUVHQyxPQUZILENBRVc7QUFBQSxhQUFXWixrQkFBa0JvQixRQUFRbkIsSUFBMUIsQ0FBWDtBQUFBLEtBRlg7QUFHRCxHQVZIOztBQVlBLFNBQU9ILEdBQVA7QUFDRDs7QUFFRHVCLE9BQU9DLE9BQVAsR0FBaUIxQixzQkFBakIiLCJmaWxlIjoiZ2V0Tm9uRGVjbGFyYXRpb25UeXBlcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTUtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgbGljZW5zZSBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGluXG4gKiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZmxvd1xuICovXG5cbmltcG9ydCB0eXBlIHtDb2xsZWN0aW9uLCBOb2RlfSBmcm9tICcuLi90eXBlcy9hc3QnO1xuXG5pbXBvcnQganNjcyBmcm9tICdqc2NvZGVzaGlmdCc7XG5cbi8qKlxuICogVGhpcyB3aWxsIGdldCBhIGxpc3Qgb2YgYWxsIHR5cGVzIHRoYXQgYXJlIG5vdCBmcm9tIGEgZGVjbGFyYXRpb24uXG4gKlxuICogTk9URTogdGhpcyBjYW4gZ2V0IHR5cGVzIHRoYXQgYXJlIGRlY2xhcmVkLCBpZiB5b3Ugd2FudCBhY2Nlc3MgdG9cbiAqIHR5cGVzIHRoYXQgYXJlIHVzZWQgYnV0IHVuZGVjbGFyZWQgc2VlIGdldFVuZGVjbGFyZWRUeXBlc1xuICovXG5mdW5jdGlvbiBnZXROb25EZWNsYXJhdGlvblR5cGVzKHJvb3Q6IENvbGxlY3Rpb24pOiBTZXQ8c3RyaW5nPiB7XG4gIGNvbnN0IGlkcyA9IG5ldyBTZXQoKTtcblxuICAvLyBQdWxsIG91dCB0aGUgbG9naWMgdG8gaGFuZGxlIGEgZ2VuZXJpYyB0eXBlIGFubm90YXRpb24sIHdlIGhhdmUgdG8gaXRlcmF0ZVxuICAvLyBkb3duIHRoZSBxdWFsaWZpZWQgdHlwZXMgdG8gaGFuZGxlIHRoaW5ncyBsaWtlOiBgPEltbXV0YWJsZS5MaXN0PEZvbz4+YFxuICBmdW5jdGlvbiBoYW5kbGVHZW5lcmljVHlwZShub2RlOiBOb2RlKTogdm9pZCB7XG4gICAgaWYgKGpzY3MuSWRlbnRpZmllci5jaGVjayhub2RlLmlkKSkge1xuICAgICAgaWRzLmFkZChub2RlLmlkLm5hbWUpO1xuICAgIH1cbiAgICBpZiAoanNjcy5RdWFsaWZpZWRUeXBlSWRlbnRpZmllci5jaGVjayhub2RlLmlkKSkge1xuICAgICAgbGV0IGN1cnJQb3MgPSBub2RlLmlkO1xuICAgICAgd2hpbGUgKGN1cnJQb3MgJiYgIWpzY3MuSWRlbnRpZmllci5jaGVjayhjdXJyUG9zKSkge1xuICAgICAgICBjdXJyUG9zID0gY3VyclBvcy5xdWFsaWZpY2F0aW9uO1xuICAgICAgfVxuICAgICAgaWYgKGpzY3MuSWRlbnRpZmllci5jaGVjayhjdXJyUG9zKSkge1xuICAgICAgICBpZHMuYWRkKGN1cnJQb3MubmFtZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLy8gSWRlYWxseSB0aGlzIHdvdWxkIGJlIHRoZSBvbmx5IGZpbmQgaW4gaGVyZSwgYnV0IGl0J3Mgbm90IGJlY2F1c2Ugb2YgYVxuICAvLyBqc2NvZGVzaGlmdCBidWcsIHNvIHdlIGhhdmUgdG8gbWFudWFsbHkgc2VhcmNoIGZvciBhIHNwZWNpZmljIGtpbmQgb2ZcbiAgLy8gR2VuZXJpY1R5cGVBbm5vdGF0aW9ucyBvbiBjbGFzcyBzdXBlciB0eXBlc1xuICByb290XG4gICAgLmZpbmQoanNjcy5HZW5lcmljVHlwZUFubm90YXRpb24pXG4gICAgLmZvckVhY2gocGF0aCA9PiBoYW5kbGVHZW5lcmljVHlwZShwYXRoLm5vZGUpKTtcblxuICAvLyBUT0RPOiBEZWxldGUgdGhpcyBhZnRlciBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svanNjb2Rlc2hpZnQvaXNzdWVzLzM0XG4gIHJvb3RcbiAgICAuZmluZChqc2NzLkNsYXNzRGVjbGFyYXRpb24pXG4gICAgLmZpbHRlcihwYXRoID0+IChcbiAgICAgIHBhdGgubm9kZS5zdXBlclR5cGVQYXJhbWV0ZXJzICYmXG4gICAgICBBcnJheS5pc0FycmF5KHBhdGgubm9kZS5zdXBlclR5cGVQYXJhbWV0ZXJzLnBhcmFtcylcbiAgICApKVxuICAgIC5mb3JFYWNoKHBhdGggPT4ge1xuICAgICAganNjcyhwYXRoLm5vZGUuc3VwZXJUeXBlUGFyYW1ldGVycylcbiAgICAgICAgLmZpbmQoanNjcy5HZW5lcmljVHlwZUFubm90YXRpb24pXG4gICAgICAgIC5mb3JFYWNoKHN1YlBhdGggPT4gaGFuZGxlR2VuZXJpY1R5cGUoc3ViUGF0aC5ub2RlKSk7XG4gICAgfSk7XG5cbiAgcmV0dXJuIGlkcztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnZXROb25EZWNsYXJhdGlvblR5cGVzO1xuIl19