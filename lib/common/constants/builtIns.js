'use strict';

/*
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the license found in the LICENSE file in
 * the root directory of this source tree.
 *
 * 
 */

/**
 * This is the set of modules that are "built-in" and never need to be required.
 *
 * Mostly taken from `flow/lib/core.js`.
 */
module.exports = new Set([
// Map, Set excluded on purpose for polyfilling
'Array', 'ArrayBuffer', 'Boolean', 'CallSite', 'DataView', 'Date', 'Error', 'EvalError', 'Float32Array', 'Float64Array', 'Function', 'Infinity', 'Int16Array', 'Int32Array', 'Int8Array', 'JSON', 'Math', 'NaN', 'Number', 'Object', 'Promise', 'Proxy', 'RangeError', 'ReferenceError', 'Reflect', 'RegExp', 'String', 'Symbol', 'SyntaxError', 'TypeError', 'Uint16Array', 'Uint32Array', 'Uint8Array', 'Uint8ClampedArray', 'URIError', 'WeakMap', 'WeakSet', 'arguments', 'global', 'isFinite', 'isNaN', 'parseFloat', 'parseInt', 'undefined', 'console',

// Browser built ins.
'alert', 'atob', 'btoa', 'clearInterval', 'clearTimeout', 'confirm', 'decodeURI', 'decodeURIComponent', 'document', 'encodeURI', 'encodeURIComponent', 'escape', 'indexedDB', 'location', 'localStorage', 'open', 'performance', 'prompt', 'screen', 'sessionStorage', 'setInterval', 'setTimeout', 'unescape', 'window', 'Option',

// Module built ins.
'exports', 'module', 'require',

// Common dev flag.
'__DEV__',

// Jest/Jasmine build ins.
'afterEach', 'beforeEach', 'describe', 'expect', 'it', 'test', 'jest', 'waitsForPromise', 'jasmine', 'spyOn', 'mockRunTimersOnce']);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21tb24vY29uc3RhbnRzL2J1aWx0SW5zLmpzIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJTZXQiXSwibWFwcGluZ3MiOiI7O0FBQUE7Ozs7Ozs7Ozs7QUFVQTs7Ozs7QUFLQUEsT0FBT0MsT0FBUCxHQUFpQixJQUFJQyxHQUFKLENBQVE7QUFDdkI7QUFDQSxPQUZ1QixFQUd2QixhQUh1QixFQUl2QixTQUp1QixFQUt2QixVQUx1QixFQU12QixVQU51QixFQU92QixNQVB1QixFQVF2QixPQVJ1QixFQVN2QixXQVR1QixFQVV2QixjQVZ1QixFQVd2QixjQVh1QixFQVl2QixVQVp1QixFQWF2QixVQWJ1QixFQWN2QixZQWR1QixFQWV2QixZQWZ1QixFQWdCdkIsV0FoQnVCLEVBaUJ2QixNQWpCdUIsRUFrQnZCLE1BbEJ1QixFQW1CdkIsS0FuQnVCLEVBb0J2QixRQXBCdUIsRUFxQnZCLFFBckJ1QixFQXNCdkIsU0F0QnVCLEVBdUJ2QixPQXZCdUIsRUF3QnZCLFlBeEJ1QixFQXlCdkIsZ0JBekJ1QixFQTBCdkIsU0ExQnVCLEVBMkJ2QixRQTNCdUIsRUE0QnZCLFFBNUJ1QixFQTZCdkIsUUE3QnVCLEVBOEJ2QixhQTlCdUIsRUErQnZCLFdBL0J1QixFQWdDdkIsYUFoQ3VCLEVBaUN2QixhQWpDdUIsRUFrQ3ZCLFlBbEN1QixFQW1DdkIsbUJBbkN1QixFQW9DdkIsVUFwQ3VCLEVBcUN2QixTQXJDdUIsRUFzQ3ZCLFNBdEN1QixFQXdDdkIsV0F4Q3VCLEVBeUN2QixRQXpDdUIsRUEwQ3ZCLFVBMUN1QixFQTJDdkIsT0EzQ3VCLEVBNEN2QixZQTVDdUIsRUE2Q3ZCLFVBN0N1QixFQThDdkIsV0E5Q3VCLEVBK0N2QixTQS9DdUI7O0FBaUR2QjtBQUNBLE9BbER1QixFQW1EdkIsTUFuRHVCLEVBb0R2QixNQXBEdUIsRUFxRHZCLGVBckR1QixFQXNEdkIsY0F0RHVCLEVBdUR2QixTQXZEdUIsRUF3RHZCLFdBeER1QixFQXlEdkIsb0JBekR1QixFQTBEdkIsVUExRHVCLEVBMkR2QixXQTNEdUIsRUE0RHZCLG9CQTVEdUIsRUE2RHZCLFFBN0R1QixFQThEdkIsV0E5RHVCLEVBK0R2QixVQS9EdUIsRUFnRXZCLGNBaEV1QixFQWlFdkIsTUFqRXVCLEVBa0V2QixhQWxFdUIsRUFtRXZCLFFBbkV1QixFQW9FdkIsUUFwRXVCLEVBcUV2QixnQkFyRXVCLEVBc0V2QixhQXRFdUIsRUF1RXZCLFlBdkV1QixFQXdFdkIsVUF4RXVCLEVBeUV2QixRQXpFdUIsRUEyRXZCLFFBM0V1Qjs7QUE2RXZCO0FBQ0EsU0E5RXVCLEVBK0V2QixRQS9FdUIsRUFnRnZCLFNBaEZ1Qjs7QUFrRnZCO0FBQ0EsU0FuRnVCOztBQXFGdkI7QUFDQSxXQXRGdUIsRUF1RnZCLFlBdkZ1QixFQXdGdkIsVUF4RnVCLEVBeUZ2QixRQXpGdUIsRUEwRnZCLElBMUZ1QixFQTJGdkIsTUEzRnVCLEVBNEZ2QixNQTVGdUIsRUE2RnZCLGlCQTdGdUIsRUE4RnZCLFNBOUZ1QixFQStGdkIsT0EvRnVCLEVBZ0d2QixtQkFoR3VCLENBQVIsQ0FBakIiLCJmaWxlIjoiYnVpbHRJbnMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQ29weXJpZ2h0IChjKSAyMDE1LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIGxpY2Vuc2UgZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBpblxuICogdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZsb3dcbiAqL1xuXG4vKipcbiAqIFRoaXMgaXMgdGhlIHNldCBvZiBtb2R1bGVzIHRoYXQgYXJlIFwiYnVpbHQtaW5cIiBhbmQgbmV2ZXIgbmVlZCB0byBiZSByZXF1aXJlZC5cbiAqXG4gKiBNb3N0bHkgdGFrZW4gZnJvbSBgZmxvdy9saWIvY29yZS5qc2AuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gbmV3IFNldChbXG4gIC8vIE1hcCwgU2V0IGV4Y2x1ZGVkIG9uIHB1cnBvc2UgZm9yIHBvbHlmaWxsaW5nXG4gICdBcnJheScsXG4gICdBcnJheUJ1ZmZlcicsXG4gICdCb29sZWFuJyxcbiAgJ0NhbGxTaXRlJyxcbiAgJ0RhdGFWaWV3JyxcbiAgJ0RhdGUnLFxuICAnRXJyb3InLFxuICAnRXZhbEVycm9yJyxcbiAgJ0Zsb2F0MzJBcnJheScsXG4gICdGbG9hdDY0QXJyYXknLFxuICAnRnVuY3Rpb24nLFxuICAnSW5maW5pdHknLFxuICAnSW50MTZBcnJheScsXG4gICdJbnQzMkFycmF5JyxcbiAgJ0ludDhBcnJheScsXG4gICdKU09OJyxcbiAgJ01hdGgnLFxuICAnTmFOJyxcbiAgJ051bWJlcicsXG4gICdPYmplY3QnLFxuICAnUHJvbWlzZScsXG4gICdQcm94eScsXG4gICdSYW5nZUVycm9yJyxcbiAgJ1JlZmVyZW5jZUVycm9yJyxcbiAgJ1JlZmxlY3QnLFxuICAnUmVnRXhwJyxcbiAgJ1N0cmluZycsXG4gICdTeW1ib2wnLFxuICAnU3ludGF4RXJyb3InLFxuICAnVHlwZUVycm9yJyxcbiAgJ1VpbnQxNkFycmF5JyxcbiAgJ1VpbnQzMkFycmF5JyxcbiAgJ1VpbnQ4QXJyYXknLFxuICAnVWludDhDbGFtcGVkQXJyYXknLFxuICAnVVJJRXJyb3InLFxuICAnV2Vha01hcCcsXG4gICdXZWFrU2V0JyxcblxuICAnYXJndW1lbnRzJyxcbiAgJ2dsb2JhbCcsXG4gICdpc0Zpbml0ZScsXG4gICdpc05hTicsXG4gICdwYXJzZUZsb2F0JyxcbiAgJ3BhcnNlSW50JyxcbiAgJ3VuZGVmaW5lZCcsXG4gICdjb25zb2xlJyxcblxuICAvLyBCcm93c2VyIGJ1aWx0IGlucy5cbiAgJ2FsZXJ0JyxcbiAgJ2F0b2InLFxuICAnYnRvYScsXG4gICdjbGVhckludGVydmFsJyxcbiAgJ2NsZWFyVGltZW91dCcsXG4gICdjb25maXJtJyxcbiAgJ2RlY29kZVVSSScsXG4gICdkZWNvZGVVUklDb21wb25lbnQnLFxuICAnZG9jdW1lbnQnLFxuICAnZW5jb2RlVVJJJyxcbiAgJ2VuY29kZVVSSUNvbXBvbmVudCcsXG4gICdlc2NhcGUnLFxuICAnaW5kZXhlZERCJyxcbiAgJ2xvY2F0aW9uJyxcbiAgJ2xvY2FsU3RvcmFnZScsXG4gICdvcGVuJyxcbiAgJ3BlcmZvcm1hbmNlJyxcbiAgJ3Byb21wdCcsXG4gICdzY3JlZW4nLFxuICAnc2Vzc2lvblN0b3JhZ2UnLFxuICAnc2V0SW50ZXJ2YWwnLFxuICAnc2V0VGltZW91dCcsXG4gICd1bmVzY2FwZScsXG4gICd3aW5kb3cnLFxuXG4gICdPcHRpb24nLFxuXG4gIC8vIE1vZHVsZSBidWlsdCBpbnMuXG4gICdleHBvcnRzJyxcbiAgJ21vZHVsZScsXG4gICdyZXF1aXJlJyxcblxuICAvLyBDb21tb24gZGV2IGZsYWcuXG4gICdfX0RFVl9fJyxcblxuICAvLyBKZXN0L0phc21pbmUgYnVpbGQgaW5zLlxuICAnYWZ0ZXJFYWNoJyxcbiAgJ2JlZm9yZUVhY2gnLFxuICAnZGVzY3JpYmUnLFxuICAnZXhwZWN0JyxcbiAgJ2l0JyxcbiAgJ3Rlc3QnLFxuICAnamVzdCcsXG4gICd3YWl0c0ZvclByb21pc2UnLFxuICAnamFzbWluZScsXG4gICdzcHlPbicsXG4gICdtb2NrUnVuVGltZXJzT25jZScsXG5dKTtcbiJdfQ==