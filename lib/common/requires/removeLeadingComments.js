'use strict';

var _FirstNode = require('../utils/FirstNode');

var _FirstNode2 = _interopRequireDefault(_FirstNode);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Removes the leading comments from the first node. Leading comments are
 * defined as:
 *
 *   - let N be the number of leading comments numbered 0 to N-1
 *   - if there is space betwee comment N-1 and first, comments 0 to N-1
 *   - else comments 0 to N-2
 */
/*
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the license found in the LICENSE file in
 * the root directory of this source tree.
 *
 * 
 */

function removeLeadingComments(root) {
  var firstPath = _FirstNode2.default.get(root);
  if (!firstPath) {
    return [];
  }
  var first = firstPath.node;
  if (!first || !first.comments) {
    return [];
  }

  // Check that the comments start the file, otherwise there is likely a
  // 'use strict' directive and we don't want to transfer these comments.
  var firstComment = first.comments[0];
  if (firstComment && firstComment.start != null && firstComment.start !== 0) {
    return [];
  }

  // Check if the last comment ends exactly where the first node starts.
  var transferLastcomment = false;
  var lastComment = first.comments.reduce(function (curr, next) {
    return next.leading ? next : curr;
  }, null);
  if (lastComment && first.start != null && lastComment.end != null) {
    var difference = Math.abs(first.start - lastComment.end);
    if (difference > 1) {
      transferLastcomment = true;
    }
  }

  // Count how many comments we need to transfer, treat negative counts as 0.
  var transferCount = first.comments.reduce(function (count, next) {
    return next.leading ? count + 1 : count;
  }, transferLastcomment ? 0 : -1);
  if (transferCount <= 0) {
    return [];
  }

  // Make the transfer.
  var transfer = [];
  var keep = [];
  first.comments.forEach(function (comment) {
    if (transfer.length < transferCount && comment.leading) {
      transfer.push(comment);
    } else {
      keep.push(comment);
    }
  });

  first.comments = keep;
  firstPath.replace(first);
  return transfer;
}

module.exports = removeLeadingComments;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21tb24vcmVxdWlyZXMvcmVtb3ZlTGVhZGluZ0NvbW1lbnRzLmpzIl0sIm5hbWVzIjpbInJlbW92ZUxlYWRpbmdDb21tZW50cyIsInJvb3QiLCJmaXJzdFBhdGgiLCJnZXQiLCJmaXJzdCIsIm5vZGUiLCJjb21tZW50cyIsImZpcnN0Q29tbWVudCIsInN0YXJ0IiwidHJhbnNmZXJMYXN0Y29tbWVudCIsImxhc3RDb21tZW50IiwicmVkdWNlIiwiY3VyciIsIm5leHQiLCJsZWFkaW5nIiwiZW5kIiwiZGlmZmVyZW5jZSIsIk1hdGgiLCJhYnMiLCJ0cmFuc2ZlckNvdW50IiwiY291bnQiLCJ0cmFuc2ZlciIsImtlZXAiLCJmb3JFYWNoIiwibGVuZ3RoIiwiY29tbWVudCIsInB1c2giLCJyZXBsYWNlIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6Ijs7QUFZQTs7Ozs7O0FBRUE7Ozs7Ozs7O0FBZEE7Ozs7Ozs7Ozs7QUFzQkEsU0FBU0EscUJBQVQsQ0FBK0JDLElBQS9CLEVBQThEO0FBQzVELE1BQU1DLFlBQVksb0JBQVVDLEdBQVYsQ0FBY0YsSUFBZCxDQUFsQjtBQUNBLE1BQUksQ0FBQ0MsU0FBTCxFQUFnQjtBQUNkLFdBQU8sRUFBUDtBQUNEO0FBQ0QsTUFBTUUsUUFBUUYsVUFBVUcsSUFBeEI7QUFDQSxNQUFJLENBQUNELEtBQUQsSUFBVSxDQUFDQSxNQUFNRSxRQUFyQixFQUErQjtBQUM3QixXQUFPLEVBQVA7QUFDRDs7QUFFRDtBQUNBO0FBQ0EsTUFBTUMsZUFBZUgsTUFBTUUsUUFBTixDQUFlLENBQWYsQ0FBckI7QUFDQSxNQUFJQyxnQkFBZ0JBLGFBQWFDLEtBQWIsSUFBc0IsSUFBdEMsSUFBOENELGFBQWFDLEtBQWIsS0FBdUIsQ0FBekUsRUFBNEU7QUFDMUUsV0FBTyxFQUFQO0FBQ0Q7O0FBRUQ7QUFDQSxNQUFJQyxzQkFBc0IsS0FBMUI7QUFDQSxNQUFNQyxjQUFjTixNQUFNRSxRQUFOLENBQWVLLE1BQWYsQ0FDbEIsVUFBQ0MsSUFBRCxFQUFPQyxJQUFQO0FBQUEsV0FBaUJBLEtBQUtDLE9BQUwsR0FBZUQsSUFBZixHQUFzQkQsSUFBdkM7QUFBQSxHQURrQixFQUVsQixJQUZrQixDQUFwQjtBQUlBLE1BQUlGLGVBQWVOLE1BQU1JLEtBQU4sSUFBZSxJQUE5QixJQUFzQ0UsWUFBWUssR0FBWixJQUFtQixJQUE3RCxFQUFtRTtBQUNqRSxRQUFNQyxhQUFhQyxLQUFLQyxHQUFMLENBQVNkLE1BQU1JLEtBQU4sR0FBY0UsWUFBWUssR0FBbkMsQ0FBbkI7QUFDQSxRQUFJQyxhQUFhLENBQWpCLEVBQW9CO0FBQ2xCUCw0QkFBc0IsSUFBdEI7QUFDRDtBQUNGOztBQUVEO0FBQ0EsTUFBTVUsZ0JBQWdCZixNQUFNRSxRQUFOLENBQWVLLE1BQWYsQ0FDcEIsVUFBQ1MsS0FBRCxFQUFRUCxJQUFSO0FBQUEsV0FBa0JBLEtBQUtDLE9BQUwsR0FBZU0sUUFBUSxDQUF2QixHQUEyQkEsS0FBN0M7QUFBQSxHQURvQixFQUVwQlgsc0JBQXNCLENBQXRCLEdBQTBCLENBQUMsQ0FGUCxDQUF0QjtBQUlBLE1BQUlVLGlCQUFpQixDQUFyQixFQUF3QjtBQUN0QixXQUFPLEVBQVA7QUFDRDs7QUFFRDtBQUNBLE1BQU1FLFdBQVcsRUFBakI7QUFDQSxNQUFNQyxPQUFPLEVBQWI7QUFDQWxCLFFBQU1FLFFBQU4sQ0FBZWlCLE9BQWYsQ0FBdUIsbUJBQVc7QUFDaEMsUUFBSUYsU0FBU0csTUFBVCxHQUFrQkwsYUFBbEIsSUFBbUNNLFFBQVFYLE9BQS9DLEVBQXdEO0FBQ3RETyxlQUFTSyxJQUFULENBQWNELE9BQWQ7QUFDRCxLQUZELE1BRU87QUFDTEgsV0FBS0ksSUFBTCxDQUFVRCxPQUFWO0FBQ0Q7QUFDRixHQU5EOztBQVFBckIsUUFBTUUsUUFBTixHQUFpQmdCLElBQWpCO0FBQ0FwQixZQUFVeUIsT0FBVixDQUFrQnZCLEtBQWxCO0FBQ0EsU0FBT2lCLFFBQVA7QUFDRDs7QUFFRE8sT0FBT0MsT0FBUCxHQUFpQjdCLHFCQUFqQiIsImZpbGUiOiJyZW1vdmVMZWFkaW5nQ29tbWVudHMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQ29weXJpZ2h0IChjKSAyMDE1LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIGxpY2Vuc2UgZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBpblxuICogdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZsb3dcbiAqL1xuXG5pbXBvcnQgdHlwZSB7Q29sbGVjdGlvbiwgTm9kZX0gZnJvbSAnLi4vdHlwZXMvYXN0JztcblxuaW1wb3J0IEZpcnN0Tm9kZSBmcm9tICcuLi91dGlscy9GaXJzdE5vZGUnO1xuXG4vKipcbiAqIFJlbW92ZXMgdGhlIGxlYWRpbmcgY29tbWVudHMgZnJvbSB0aGUgZmlyc3Qgbm9kZS4gTGVhZGluZyBjb21tZW50cyBhcmVcbiAqIGRlZmluZWQgYXM6XG4gKlxuICogICAtIGxldCBOIGJlIHRoZSBudW1iZXIgb2YgbGVhZGluZyBjb21tZW50cyBudW1iZXJlZCAwIHRvIE4tMVxuICogICAtIGlmIHRoZXJlIGlzIHNwYWNlIGJldHdlZSBjb21tZW50IE4tMSBhbmQgZmlyc3QsIGNvbW1lbnRzIDAgdG8gTi0xXG4gKiAgIC0gZWxzZSBjb21tZW50cyAwIHRvIE4tMlxuICovXG5mdW5jdGlvbiByZW1vdmVMZWFkaW5nQ29tbWVudHMocm9vdDogQ29sbGVjdGlvbik6IEFycmF5PE5vZGU+IHtcbiAgY29uc3QgZmlyc3RQYXRoID0gRmlyc3ROb2RlLmdldChyb290KTtcbiAgaWYgKCFmaXJzdFBhdGgpIHtcbiAgICByZXR1cm4gW107XG4gIH1cbiAgY29uc3QgZmlyc3QgPSBmaXJzdFBhdGgubm9kZTtcbiAgaWYgKCFmaXJzdCB8fCAhZmlyc3QuY29tbWVudHMpIHtcbiAgICByZXR1cm4gW107XG4gIH1cblxuICAvLyBDaGVjayB0aGF0IHRoZSBjb21tZW50cyBzdGFydCB0aGUgZmlsZSwgb3RoZXJ3aXNlIHRoZXJlIGlzIGxpa2VseSBhXG4gIC8vICd1c2Ugc3RyaWN0JyBkaXJlY3RpdmUgYW5kIHdlIGRvbid0IHdhbnQgdG8gdHJhbnNmZXIgdGhlc2UgY29tbWVudHMuXG4gIGNvbnN0IGZpcnN0Q29tbWVudCA9IGZpcnN0LmNvbW1lbnRzWzBdO1xuICBpZiAoZmlyc3RDb21tZW50ICYmIGZpcnN0Q29tbWVudC5zdGFydCAhPSBudWxsICYmIGZpcnN0Q29tbWVudC5zdGFydCAhPT0gMCkge1xuICAgIHJldHVybiBbXTtcbiAgfVxuXG4gIC8vIENoZWNrIGlmIHRoZSBsYXN0IGNvbW1lbnQgZW5kcyBleGFjdGx5IHdoZXJlIHRoZSBmaXJzdCBub2RlIHN0YXJ0cy5cbiAgbGV0IHRyYW5zZmVyTGFzdGNvbW1lbnQgPSBmYWxzZTtcbiAgY29uc3QgbGFzdENvbW1lbnQgPSBmaXJzdC5jb21tZW50cy5yZWR1Y2UoXG4gICAgKGN1cnIsIG5leHQpID0+IChuZXh0LmxlYWRpbmcgPyBuZXh0IDogY3VyciksXG4gICAgbnVsbCxcbiAgKTtcbiAgaWYgKGxhc3RDb21tZW50ICYmIGZpcnN0LnN0YXJ0ICE9IG51bGwgJiYgbGFzdENvbW1lbnQuZW5kICE9IG51bGwpIHtcbiAgICBjb25zdCBkaWZmZXJlbmNlID0gTWF0aC5hYnMoZmlyc3Quc3RhcnQgLSBsYXN0Q29tbWVudC5lbmQpO1xuICAgIGlmIChkaWZmZXJlbmNlID4gMSkge1xuICAgICAgdHJhbnNmZXJMYXN0Y29tbWVudCA9IHRydWU7XG4gICAgfVxuICB9XG5cbiAgLy8gQ291bnQgaG93IG1hbnkgY29tbWVudHMgd2UgbmVlZCB0byB0cmFuc2ZlciwgdHJlYXQgbmVnYXRpdmUgY291bnRzIGFzIDAuXG4gIGNvbnN0IHRyYW5zZmVyQ291bnQgPSBmaXJzdC5jb21tZW50cy5yZWR1Y2UoXG4gICAgKGNvdW50LCBuZXh0KSA9PiAobmV4dC5sZWFkaW5nID8gY291bnQgKyAxIDogY291bnQpLFxuICAgIHRyYW5zZmVyTGFzdGNvbW1lbnQgPyAwIDogLTEsXG4gICk7XG4gIGlmICh0cmFuc2ZlckNvdW50IDw9IDApIHtcbiAgICByZXR1cm4gW107XG4gIH1cblxuICAvLyBNYWtlIHRoZSB0cmFuc2Zlci5cbiAgY29uc3QgdHJhbnNmZXIgPSBbXTtcbiAgY29uc3Qga2VlcCA9IFtdO1xuICBmaXJzdC5jb21tZW50cy5mb3JFYWNoKGNvbW1lbnQgPT4ge1xuICAgIGlmICh0cmFuc2Zlci5sZW5ndGggPCB0cmFuc2ZlckNvdW50ICYmIGNvbW1lbnQubGVhZGluZykge1xuICAgICAgdHJhbnNmZXIucHVzaChjb21tZW50KTtcbiAgICB9IGVsc2Uge1xuICAgICAga2VlcC5wdXNoKGNvbW1lbnQpO1xuICAgIH1cbiAgfSk7XG5cbiAgZmlyc3QuY29tbWVudHMgPSBrZWVwO1xuICBmaXJzdFBhdGgucmVwbGFjZShmaXJzdCk7XG4gIHJldHVybiB0cmFuc2Zlcjtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSByZW1vdmVMZWFkaW5nQ29tbWVudHM7XG4iXX0=